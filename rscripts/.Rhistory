path_plot = paste0(path_plot, "banded_tails"),
name_plot = "JCR0034",
image_type = "png")
## Using function to plot the data
plotSpectro(vec_samples = c("JCR0035"), # select specimen numbers
path_data = path_data,
ext_files = '.txt' ,
save_plot = TRUE, # TRUE = save plot, FALSE = display plot
path_plot = paste0(path_plot, "banded_tails"),
name_plot = "JCR0035",
image_type = "png")
pheno$id
## Using function to plot the data
plotSpectro(vec_samples = c("JCR0023"), # select specimen numbers
path_data = path_data,
ext_files = '.txt' ,
save_plot = TRUE, # TRUE = save plot, FALSE = display plot
path_plot = paste0(path_plot, "transition_tails"),
name_plot = "JCR0023",
image_type = "png")
## Using function to plot the data
plotSpectro(vec_samples = c("JCR0007"), # select specimen numbers
path_data = path_data,
ext_files = '.txt' ,
save_plot = TRUE, # TRUE = save plot, FALSE = display plot
path_plot = paste0(path_plot, "transition_tails"),
name_plot = "JCR0007",
image_type = "png")
## Using function to plot the data
plotSpectro(vec_samples = c("JCR0008"), # select specimen numbers
path_data = path_data,
ext_files = '.txt' ,
save_plot = TRUE, # TRUE = save plot, FALSE = display plot
path_plot = paste0(path_plot, "transition_tails"),
name_plot = "JCR0008",
image_type = "png")
## Using function to plot the data
plotSpectro(vec_samples = c("JCR0025"), # select specimen numbers
path_data = path_data,
ext_files = '.txt' ,
save_plot = TRUE, # TRUE = save plot, FALSE = display plot
path_plot = paste0(path_plot, "transition_tails"),
name_plot = "JCR0025",
image_type = "png")
## Using function to plot the data
plotSpectro(vec_samples = c("JCR0009"), # select specimen numbers
path_data = path_data,
ext_files = '.txt' ,
save_plot = TRUE, # TRUE = save plot, FALSE = display plot
path_plot = paste0(path_plot, "transition_tails"),
name_plot = "JCR0009",
image_type = "png")
## Using function to plot the data
plotSpectro(vec_samples = c("JCR0013"), # select specimen numbers
path_data = path_data,
ext_files = '.txt' ,
save_plot = TRUE, # TRUE = save plot, FALSE = display plot
path_plot = paste0(path_plot, "transition_tails"),
name_plot = "JCR0013",
image_type = "png")
## Using function to plot the data
plotSpectro(vec_samples = c("JCR0014"), # select specimen numbers
path_data = path_data,
ext_files = '.txt' ,
save_plot = TRUE, # TRUE = save plot, FALSE = display plot
path_plot = paste0(path_plot, "transition_tails"),
name_plot = "JCR0014",
image_type = "png")
## Using function to plot the data
plotSpectro(vec_samples = c("JCR0026"), # select specimen numbers
path_data = path_data,
ext_files = '.txt' ,
save_plot = TRUE, # TRUE = save plot, FALSE = display plot
path_plot = paste0(path_plot, "transition_tails"),
name_plot = "JCR0026",
image_type = "png")
## Using function to plot the data
plotSpectro(vec_samples = c("JCR0015"), # select specimen numbers
path_data = path_data,
ext_files = '.txt' ,
save_plot = TRUE, # TRUE = save plot, FALSE = display plot
path_plot = paste0(path_plot, "transition_tails"),
name_plot = "JCR0015",
image_type = "png")
## Using function to plot the data
plotSpectro(vec_samples = c("JCR0001"), # select specimen numbers
path_data = path_data,
ext_files = '.txt' ,
save_plot = TRUE, # TRUE = save plot, FALSE = display plot
path_plot = paste0(path_plot, "transition_tails"),
name_plot = "JCR0001",
image_type = "png")
## Using function to plot the data
plotSpectro(vec_samples = c("JCR0022"), # select specimen numbers
path_data = path_data,
ext_files = '.txt' ,
save_plot = TRUE, # TRUE = save plot, FALSE = display plot
path_plot = paste0(path_plot, "striped_tails"),
name_plot = "JCR0022",
image_type = "png")
## Using function to plot the data
plotSpectro(vec_samples = c("JCR0016"), # select specimen numbers
path_data = path_data,
ext_files = '.txt' ,
save_plot = TRUE, # TRUE = save plot, FALSE = display plot
path_plot = paste0(path_plot, "striped_tails"),
name_plot = "JCR0016",
image_type = "png")
## Using function to plot the data
plotSpectro(vec_samples = c("JCR0002"), # select specimen numbers
path_data = path_data,
ext_files = '.txt' ,
save_plot = TRUE, # TRUE = save plot, FALSE = display plot
path_plot = paste0(path_plot, "striped_tails"),
name_plot = "JCR0002",
image_type = "png")
## Using function to plot the data
plotSpectro(vec_samples = c("JCR0005"), # select specimen numbers
path_data = path_data,
ext_files = '.txt' ,
save_plot = TRUE, # TRUE = save plot, FALSE = display plot
path_plot = paste0(path_plot, "striped_tails"),
name_plot = "JCR0005",
image_type = "png")
## Using function to plot the data
plotSpectro(vec_samples = c("JCR0003"), # select specimen numbers
path_data = path_data,
ext_files = '.txt' ,
save_plot = TRUE, # TRUE = save plot, FALSE = display plot
path_plot = paste0(path_plot, "striped_tails"),
name_plot = "JCR0003",
image_type = "png")
## Using function to plot the data
plotSpectro(vec_samples = c("JCR0006"), # select specimen numbers
path_data = path_data,
ext_files = '.txt' ,
save_plot = TRUE, # TRUE = save plot, FALSE = display plot
path_plot = paste0(path_plot, "striped_tails"),
name_plot = "JCR0006",
image_type = "png")
## Using function to plot the data
plotSpectro(vec_samples = c("JCR0004"), # select specimen numbers
path_data = path_data,
ext_files = '.txt' ,
save_plot = TRUE, # TRUE = save plot, FALSE = display plot
path_plot = paste0(path_plot, "striped_tails"),
name_plot = "JCR0004",
image_type = "png")
## Using function to plot the data
plotSpectro(vec_samples = c("JCR0017"), # select specimen numbers
path_data = path_data,
ext_files = '.txt' ,
save_plot = TRUE, # TRUE = save plot, FALSE = display plot
path_plot = paste0(path_plot, "striped_tails"),
name_plot = "JCR0017",
image_type = "png")
## Using function to plot the data
plotSpectro(vec_samples = c("JCR0018"), # select specimen numbers
path_data = path_data,
ext_files = '.txt' ,
save_plot = TRUE, # TRUE = save plot, FALSE = display plot
path_plot = paste0(path_plot, "striped_tails"),
name_plot = "JCR0018",
image_type = "png")
## Using function to plot the data
plotSpectro(vec_samples = c("JCR0019"), # select specimen numbers
path_data = path_data,
ext_files = '.txt' ,
save_plot = TRUE, # TRUE = save plot, FALSE = display plot
path_plot = paste0(path_plot, "uniform_tails"),
name_plot = "JCR0019",
image_type = "png")
## Mean reflectance for each colour and phenotype
pheno_meanSpectro <- meanSpectro %>%
#filter(id != "JCR0026", id != "JCR0032") %>%
mutate(colour = gsub(x = colour, pattern = "1|2", replacement = "")) %>%
group_by(phenotype, colour, wavelength) %>%
summarise(meanSum_reflectance = mean(mean_reflectance),
min_reflectance = min(mean_reflectance),
max_reflectance = max(mean_reflectance),
sd_reflectance = sd(mean_reflectance))
View(pheno_meanSpectro)
## Palette
pal2 <- c("Black" = "#333333",
"BlackVentral" = "#999999",
"White" = "#CC9999",
"YellowVentral" = "#FFCC99",
"WhiteVentral" = "#CCCCFF")
## filter by phenotype
striped <- pheno_meanSpectro %>%
filter(phenotype %in% "Striped") %>% # change text to modify phenotype: "Banded", "Transition", "Striped", "Uniform"
filter(wavelength > 300) %>%
ggplot(aes(x = wavelength, y = meanSum_reflectance, colour = colour)) +
geom_line(size = 5) +
geom_errorbar(aes(ymin = meanSum_reflectance - sd_reflectance, ymax = meanSum_reflectance + sd_reflectance),
width=.5,position=position_dodge(.9), alpha = 0.1)  +
scale_colour_manual(values = pal2) +
labs(x = '', y = '') +
theme_classic() +
xlim(300, 900) +
ylim(0, 100) +
geom_vline(xintercept = 380, linetype = "dotted", colour = "gray", size = 1.5) +
#annotate(geom="text", x = 350, y = 100, label = "UV", color = "grey20") +
theme(plot.title = element_text(hjust = 0.5),
axis.line.x = element_line(colour = 'black', size = 2),
axis.ticks.x = element_line(colour = "black", size = 2),
axis.line.y = element_line(colour = 'black', size = 2),
axis.ticks.y = element_line(colour = "black", size = 2),
text = element_text(size = 20),
legend.position = "none")
striped
## filter by phenotype
banded <- pheno_meanSpectro %>%
filter(phenotype %in% "Striped") %>% # change text to modify phenotype: "Banded", "Transition", "Striped", "Uniform"
filter(wavelength > 300) %>%
ggplot(aes(x = wavelength, y = meanSum_reflectance, colour = colour)) +
geom_line(size = 5) +
geom_errorbar(aes(ymin = meanSum_reflectance - sd_reflectance, ymax = meanSum_reflectance + sd_reflectance),
width=.5,position=position_dodge(.9), alpha = 0.1)  +
scale_colour_manual(values = pal2) +
labs(x = '', y = '') +
theme_classic() +
xlim(300, 900) +
ylim(0, 100) +
geom_vline(xintercept = 380, linetype = "dotted", colour = "gray", size = 1.5) +
#annotate(geom="text", x = 350, y = 100, label = "UV", color = "grey20") +
theme(plot.title = element_text(hjust = 0.5),
axis.line.x = element_line(colour = 'black', size = 2),
axis.ticks.x = element_line(colour = "black", size = 2),
axis.line.y = element_line(colour = 'black', size = 2),
axis.ticks.y = element_line(colour = "black", size = 2),
text = element_text(size = 20),
legend.position = "none")
## Save plots
ggsave(filename = "banded_mean.png",
device = "png",
path = normalizePath(path_plot),
plot = banded,
width = 297,
height = 210,
units = "mm")
## filter by phenotype
banded <- pheno_meanSpectro %>%
filter(phenotype %in% "Banded") %>% # change text to modify phenotype: "Banded", "Transition", "Striped", "Uniform"
filter(wavelength > 300) %>%
ggplot(aes(x = wavelength, y = meanSum_reflectance, colour = colour)) +
geom_line(size = 5) +
geom_errorbar(aes(ymin = meanSum_reflectance - sd_reflectance, ymax = meanSum_reflectance + sd_reflectance),
width=.5,position=position_dodge(.9), alpha = 0.1)  +
scale_colour_manual(values = pal2) +
labs(x = '', y = '') +
theme_classic() +
xlim(300, 900) +
ylim(0, 100) +
geom_vline(xintercept = 380, linetype = "dotted", colour = "gray", size = 1.5) +
#annotate(geom="text", x = 350, y = 100, label = "UV", color = "grey20") +
theme(plot.title = element_text(hjust = 0.5),
axis.line.x = element_line(colour = 'black', size = 2),
axis.ticks.x = element_line(colour = "black", size = 2),
axis.line.y = element_line(colour = 'black', size = 2),
axis.ticks.y = element_line(colour = "black", size = 2),
text = element_text(size = 20),
legend.position = "none") +
facet_wrap(~phenotype)
banded
## filter by phenotype
banded <- pheno_meanSpectro %>%
filter(phenotype %in% "Banded") %>% # change text to modify phenotype: "Banded", "Transition", "Striped", "Uniform"
filter(wavelength > 300) %>%
ggplot(aes(x = wavelength, y = meanSum_reflectance, colour = colour)) +
geom_line(size = 5) +
geom_errorbar(aes(ymin = meanSum_reflectance - sd_reflectance, ymax = meanSum_reflectance + sd_reflectance),
width=.5,position=position_dodge(.9), alpha = 0.1)  +
scale_colour_manual(values = pal2) +
labs(x = '', y = '') +
theme_classic() +
xlim(300, 900) +
ylim(0, 100) +
geom_vline(xintercept = 380, linetype = "dotted", colour = "gray", size = 1.5) +
#annotate(geom="text", x = 350, y = 100, label = "UV", color = "grey20") +
theme(plot.title = element_text(hjust = 0.5),
axis.line.x = element_line(colour = 'black', size = 2),
axis.ticks.x = element_line(colour = "black", size = 2),
axis.line.y = element_line(colour = 'black', size = 2),
axis.ticks.y = element_line(colour = "black", size = 2),
text = element_text(size = 20))
banded
pheno_meanSpectro
pheno_meanSpectro %>% group_by(phenotype) %>% count(colour)
## filter by phenotype
banded <- pheno_meanSpectro %>%
filter(phenotype %in% "Banded") %>% # change text to modify phenotype: "Banded", "Transition", "Striped", "Uniform"
filter(wavelength > 300) %>%
ggplot(aes(x = wavelength, y = meanSum_reflectance, colour = colour)) +
geom_line(size = 5) +
geom_errorbar(aes(ymin = meanSum_reflectance - sd_reflectance, ymax = meanSum_reflectance + sd_reflectance),
width=.5,position=position_dodge(.9), alpha = 0.1)  +
scale_colour_manual(values = pal2) +
labs(x = '', y = '') +
theme_classic() +
xlim(300, 900) +
ylim(0, 100) +
geom_vline(xintercept = 380, linetype = "dotted", colour = "gray", size = 1.5) +
#annotate(geom="text", x = 350, y = 100, label = "UV", color = "grey20") +
theme(plot.title = element_text(hjust = 0.5),
axis.line.x = element_line(colour = 'black', size = 2),
axis.ticks.x = element_line(colour = "black", size = 2),
axis.line.y = element_line(colour = 'black', size = 2),
axis.ticks.y = element_line(colour = "black", size = 2),
legend.position = "none",
text = element_text(size = 20))
## Save plots
ggsave(filename = "banded_mean.png",
device = "png",
path = normalizePath(path_plot),
plot = banded,
width = 297,
height = 210,
units = "mm")
## filter by phenotype
transition <- pheno_meanSpectro %>%
filter(phenotype %in% "Transition") %>% # change text to modify phenotype: "Banded", "Transition", "Striped", "Uniform"
filter(wavelength > 300) %>%
ggplot(aes(x = wavelength, y = meanSum_reflectance, colour = colour)) +
geom_line(size = 5) +
geom_errorbar(aes(ymin = meanSum_reflectance - sd_reflectance, ymax = meanSum_reflectance + sd_reflectance),
width=.5,position=position_dodge(.9), alpha = 0.1)  +
scale_colour_manual(values = pal2) +
labs(x = '', y = '') +
theme_classic() +
xlim(300, 900) +
ylim(0, 100) +
geom_vline(xintercept = 380, linetype = "dotted", colour = "gray", size = 1.5) +
#annotate(geom="text", x = 350, y = 100, label = "UV", color = "grey20") +
theme(plot.title = element_text(hjust = 0.5),
axis.line.x = element_line(colour = 'black', size = 2),
axis.ticks.x = element_line(colour = "black", size = 2),
axis.line.y = element_line(colour = 'black', size = 2),
axis.ticks.y = element_line(colour = "black", size = 2),
legend.position = "none",
text = element_text(size = 20))
transition
## Save plots
ggsave(filename = "transition_mean.png",
device = "png",
path = normalizePath(path_plot),
plot = transition,
width = 297,
height = 210,
units = "mm")
## filter by phenotype
transition <- pheno_meanSpectro %>%
filter(phenotype %in% "Transition") %>% # change text to modify phenotype: "Banded", "Transition", "Striped", "Uniform"
filter(wavelength > 300) %>%
ggplot(aes(x = wavelength, y = meanSum_reflectance, colour = colour)) +
geom_line(size = 5) +
geom_errorbar(aes(ymin = meanSum_reflectance - sd_reflectance, ymax = meanSum_reflectance + sd_reflectance),
width=.5,position=position_dodge(.9), alpha = 0.1)  +
scale_colour_manual(values = pal2) +
labs(x = '', y = '') +
theme_classic() +
xlim(300, 900) +
ylim(0, 100) +
#geom_vline(xintercept = 380, linetype = "dotted", colour = "gray", size = 1.5) +
#annotate(geom="text", x = 350, y = 100, label = "UV", color = "grey20") +
theme(plot.title = element_text(hjust = 0.5),
axis.line.x = element_line(colour = 'black', size = 2),
axis.ticks.x = element_line(colour = "black", size = 2),
axis.line.y = element_line(colour = 'black', size = 2),
axis.ticks.y = element_line(colour = "black", size = 2),
legend.position = "none",
text = element_text(size = 20))
## Save plots
ggsave(filename = "transition_mean.png",
device = "png",
path = normalizePath(path_plot),
plot = transition,
width = 297,
height = 210,
units = "mm")
## filter by phenotype
transition <- pheno_meanSpectro %>%
filter(phenotype %in% "Transition") %>% # change text to modify phenotype: "Banded", "Transition", "Striped", "Uniform"
filter(wavelength > 300) %>%
ggplot(aes(x = wavelength, y = meanSum_reflectance, colour = colour)) +
geom_line(size = 5) +
geom_errorbar(aes(ymin = meanSum_reflectance - sd_reflectance, ymax = meanSum_reflectance + sd_reflectance),
width=.5,position=position_dodge(.9), alpha = 0.1)  +
scale_colour_manual(values = pal2) +
labs(x = '', y = '') +
theme_classic() +
xlim(250, 700) +
ylim(0, 100) +
geom_vline(xintercept = 380, linetype = "dotted", colour = "gray", size = 1.5) +
#annotate(geom="text", x = 350, y = 100, label = "UV", color = "grey20") +
theme(plot.title = element_text(hjust = 0.5),
axis.line.x = element_line(colour = 'black', size = 2),
axis.ticks.x = element_line(colour = "black", size = 2),
axis.line.y = element_line(colour = 'black', size = 2),
axis.ticks.y = element_line(colour = "black", size = 2),
legend.position = "none",
text = element_text(size = 20))
## Save plots
ggsave(filename = "transition_mean.png",
device = "png",
path = normalizePath(path_plot),
plot = transition,
width = 297,
height = 210,
units = "mm")
## filter by phenotype
transition <- pheno_meanSpectro %>%
filter(phenotype %in% "Transition") %>% # change text to modify phenotype: "Banded", "Transition", "Striped", "Uniform"
ggplot(aes(x = wavelength, y = meanSum_reflectance, colour = colour)) +
geom_line(size = 5) +
geom_errorbar(aes(ymin = meanSum_reflectance - sd_reflectance, ymax = meanSum_reflectance + sd_reflectance),
width=.5,position=position_dodge(.9), alpha = 0.1)  +
scale_colour_manual(values = pal2) +
labs(x = '', y = '') +
theme_classic() +
xlim(250, 700) +
ylim(0, 100) +
geom_vline(xintercept = 380, linetype = "dotted", colour = "gray", size = 1.5) +
#annotate(geom="text", x = 350, y = 100, label = "UV", color = "grey20") +
theme(plot.title = element_text(hjust = 0.5),
axis.line.x = element_line(colour = 'black', size = 2),
axis.ticks.x = element_line(colour = "black", size = 2),
axis.line.y = element_line(colour = 'black', size = 2),
axis.ticks.y = element_line(colour = "black", size = 2),
legend.position = "none",
text = element_text(size = 20))
transition
## filter by phenotype
transition <- pheno_meanSpectro %>%
filter(phenotype %in% "Transition") %>% # change text to modify phenotype: "Banded", "Transition", "Striped", "Uniform"
ggplot(aes(x = wavelength, y = meanSum_reflectance, colour = colour)) +
geom_line(size = 5) +
geom_errorbar(aes(ymin = meanSum_reflectance - sd_reflectance, ymax = meanSum_reflectance + sd_reflectance),
width=.5,position=position_dodge(.9), alpha = 0.1)  +
scale_colour_manual(values = pal2) +
labs(x = '', y = '') +
theme_classic() +
xlim(300, 700) +
ylim(0, 100) +
geom_vline(xintercept = 380, linetype = "dotted", colour = "gray", size = 1.5) +
#annotate(geom="text", x = 350, y = 100, label = "UV", color = "grey20") +
theme(plot.title = element_text(hjust = 0.5),
axis.line.x = element_line(colour = 'black', size = 2),
axis.ticks.x = element_line(colour = "black", size = 2),
axis.line.y = element_line(colour = 'black', size = 2),
axis.ticks.y = element_line(colour = "black", size = 2),
legend.position = "none",
text = element_text(size = 20))
transition
## Save plots
ggsave(filename = "transition_mean.png",
device = "png",
path = normalizePath(path_plot),
plot = transition,
width = 297,
height = 210,
units = "mm")
## filter by phenotype
banded <- pheno_meanSpectro %>%
filter(phenotype %in% "Banded") %>% # change text to modify phenotype: "Banded", "Transition", "Striped", "Uniform"
ggplot(aes(x = wavelength, y = meanSum_reflectance, colour = colour)) +
geom_line(size = 5) +
geom_errorbar(aes(ymin = meanSum_reflectance - sd_reflectance, ymax = meanSum_reflectance + sd_reflectance),
width=.5,position=position_dodge(.9), alpha = 0.1)  +
scale_colour_manual(values = pal2) +
labs(x = '', y = '') +
theme_classic() +
xlim(300, 700) +
ylim(0, 100) +
geom_vline(xintercept = 380, linetype = "dotted", colour = "gray", size = 1.5) +
#annotate(geom="text", x = 350, y = 100, label = "UV", color = "grey20") +
theme(plot.title = element_text(hjust = 0.5),
axis.line.x = element_line(colour = 'black', size = 2),
axis.ticks.x = element_line(colour = "black", size = 2),
axis.line.y = element_line(colour = 'black', size = 2),
axis.ticks.y = element_line(colour = "black", size = 2),
legend.position = "none",
text = element_text(size = 20))
## filter by phenotype
spectro_plot <- pheno_meanSpectro %>%
filter(phenotype %in% "Banded") %>% # change text to modify phenotype: "Banded", "Transition", "Striped", "Uniform"
ggplot(aes(x = wavelength, y = meanSum_reflectance, colour = colour)) +
geom_line(size = 5) +
geom_errorbar(aes(ymin = meanSum_reflectance - sd_reflectance, ymax = meanSum_reflectance + sd_reflectance),
width=.5,position=position_dodge(.9), alpha = 0.1)  +
scale_colour_manual(values = pal2) +
labs(x = '', y = '') +
theme_classic() +
xlim(300, 700) +
ylim(0, 100) +
geom_vline(xintercept = 380, linetype = "dotted", colour = "gray", size = 1.5) +
#annotate(geom="text", x = 350, y = 100, label = "UV", color = "grey20") +
theme(plot.title = element_text(hjust = 0.5),
axis.line.x = element_line(colour = 'black', size = 2),
axis.ticks.x = element_line(colour = "black", size = 2),
axis.line.y = element_line(colour = 'black', size = 2),
axis.ticks.y = element_line(colour = "black", size = 2),
legend.position = "none",
text = element_text(size = 20))
## Save plots
ggsave(filename = "banded_mean.png",
device = "png",
path = normalizePath(path_plot),
plot = spectro_plot,
width = 297,
height = 210,
units = "mm")
